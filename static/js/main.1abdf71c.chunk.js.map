{"version":3,"sources":["logo.svg","serviceWorker.js","components/main/index.jsx","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","MultipleDatesCalendar","withMultipleDates","Calendar","Main","componentDidMount","scrollTo","state","date","Date","events","start","end","name","style","paddingTop","padding","xs","span","sm","offset","md","lg","xl","this","map","key","className","marginBottom","fontSize","title","display","push","Component","interpolateSelection","defaultMultipleDateInterpolation","selected","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,kC,oDCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,wGCJAC,G,OAAwBC,YAAkBC,MAiEjCC,E,kDA9Db,aAAc,IAAD,8BACX,gBAwBFC,kBAAkB,WAChBR,OAAOS,SAAS,EAAE,IAxBlB,EAAKC,MAAM,CACPC,KAAM,IAAIC,KACVC,OAAO,CACJ,CACGC,MAAM,aACNC,IAAI,aACJC,KAAK,UAER,CACGF,MAAM,aACNC,IAAI,aACJC,KAAK,aAER,CACGF,MAAM,aACNC,IAAI,aACJC,KAAK,cAlBJ,E,qDA6BX,IAAIJ,EAAM,GACV,OACE,6BACI,wBAAIK,MAAO,CAACC,WAAW,OAAO,sCAC9B,kBAAC,IAAD,CAAKD,MAAO,CAACE,QAAQ,OACnB,kBAAC,IAAD,CAAKC,GAAI,CAACC,KAAK,IAAKC,GAAI,CAACD,KAAK,GAAGE,OAAO,GAAIC,GAAI,CAACH,KAAK,EAAEE,OAAO,GAAIE,GAAI,CAACJ,KAAK,GAAGE,OAAO,GAAIG,GAAI,CAACL,KAAK,GAAGE,OAAO,IAE7GI,KAAKjB,MAAMG,OAAOe,KAAI,SAACf,EAAOgB,GAAR,OACtB,kBAAC,IAAD,CAAOC,UAAU,WAAWb,MAAO,CAACc,aAAa,OAAOC,SAAS,UAAWH,IAAKA,EAAKI,MAAOpB,EAAOG,MAChG,sCAAYH,EAAOC,OACnB,oCAAUD,EAAOE,KACpB,uBAAGE,MAAO,CAACiB,QAAQ,SAAUtB,EAAKuB,KAAKtB,EAAOC,QAC9C,uBAAGG,MAAO,CAACiB,QAAQ,SAAUtB,EAAKuB,KAAKtB,EAAOE,WAMjD,kBAAC,IAAD,CAAKK,GAAI,CAACC,KAAK,IAAKC,GAAI,CAACD,KAAK,GAAGE,OAAO,GAAIC,GAAI,CAACH,KAAK,EAAEE,OAAO,GAAIE,GAAI,CAACJ,KAAK,GAAGE,OAAO,GAAIG,GAAI,CAACL,KAAK,GAAGE,OAAO,IAC/G,kBAAC,IAAD,CACAa,UAAWhC,EACXiC,qBAAsBC,IACtBC,SAAU3B,W,GArDHwB,a,OCAJI,MARf,WACE,OACE,yBAAKV,UAAU,OACX,kBAAC,EAAD,Q,cCDRW,EAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SHsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1abdf71c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'react-infinite-calendar/styles.css';\nimport '../main/style.css'\n\nimport { Card, Col, Row } from 'antd';\nimport InfiniteCalendar,{\n  Calendar,\n  defaultMultipleDateInterpolation,\n  withMultipleDates,\n} from 'react-infinite-calendar';\nimport React, { Component } from 'react'\n\nimport moment from 'moment';\n\n// const loadData = () => JSON.parse(JSON.stringify(data));\nconst MultipleDatesCalendar = withMultipleDates(Calendar);\nclass Main extends Component{\n\n  constructor(){\n    super();\n    this.state={\n        date: new Date(),\n        events:[\n           {\n              start:\"2020-07-10\",\n              end:\"2020-07-11\",\n              name:\"Mumbai\"\n           },\n           {\n              start:\"2020-08-12\",\n              end:\"2020-08-13\",\n              name:\"Bangalore\"\n           },\n           {\n              start:\"2020-08-21\",\n              end:\"2020-08-22\",\n              name:\"Himachal\"\n           }\n        ]\n      }\n    \n  }\n\n  componentDidMount=()=>{\n    window.scrollTo(0,0)\n  }\n  render(){ \n    var Date =[]\n    return(\n      <div>\n          <h1 style={{paddingTop:\"1%\"}}><u>Events</u></h1>\n          <Row style={{padding:\"2%\"}}>\n            <Col xs={{span:24}} sm={{span:20,offset:1}} md={{span:6,offset:1}} lg={{span:10,offset:2}} xl={{span:10,offset:2}} >\n            {\n              this.state.events.map((events,key)=>\n              <Card  className=\"cardMain\" style={{marginBottom:\"20px\",fontSize:\"1.2rem\"}} key={key} title={events.name}>\n                  <p>start : {events.start}</p>\n                  <p>end : {events.end}</p>\n               <p style={{display:\"none\"}}>{Date.push(events.start)}</p> \n               <p style={{display:\"none\"}}>{Date.push(events.end)}</p> \n              </Card>\n         \n              )\n            }\n            </Col>\n            <Col xs={{span:24}} sm={{span:20,offset:1}} md={{span:6,offset:4}} lg={{span:10,offset:1}} xl={{span:10,offset:2}}>\n            <InfiniteCalendar\n            Component={MultipleDatesCalendar}\n            interpolateSelection={defaultMultipleDateInterpolation}\n            selected={Date}\n          />\n            </Col>\n          </Row>\n      </div>\n\n    \n  )\n}\n}\n\nexport default Main\n\n","import './App.css';\nimport 'antd/dist/antd.css'\n\nimport Main from './components/main'\nimport React from 'react';\nimport logo from './logo.svg';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","import 'antd/dist/antd.css'\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}